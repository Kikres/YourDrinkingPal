// <auto-generated />
using System;
using DataLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace YourDrinkingPal.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230504091527_t")]
    partial class t
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataLayer.Models.Domain.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("HEX")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Color");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HEX = "#FF3737",
                            Name = "Röd",
                            Prompt = "Red"
                        },
                        new
                        {
                            Id = 2,
                            HEX = "#FF8337",
                            Name = "Orange",
                            Prompt = "Orange"
                        },
                        new
                        {
                            Id = 3,
                            HEX = "#C29867",
                            Name = "Brun",
                            Prompt = "Brown"
                        },
                        new
                        {
                            Id = 4,
                            HEX = "#FFE272",
                            Name = "Gul",
                            Prompt = "Yellow"
                        },
                        new
                        {
                            Id = 5,
                            HEX = "#9DE16F",
                            Name = "Grön",
                            Prompt = "Green"
                        },
                        new
                        {
                            Id = 6,
                            HEX = "#36D8B7",
                            Name = "Turkos",
                            Prompt = "Turquoise"
                        },
                        new
                        {
                            Id = 7,
                            HEX = "#53AFFF",
                            Name = "Blå",
                            Prompt = "Blue"
                        },
                        new
                        {
                            Id = 8,
                            HEX = "#DE6FFF",
                            Name = "Lila",
                            Prompt = "Purple"
                        },
                        new
                        {
                            Id = 9,
                            HEX = "#FF74BC",
                            Name = "Rosa",
                            Prompt = "Pink"
                        },
                        new
                        {
                            Id = 11,
                            HEX = "#222831",
                            Name = "Svart",
                            Prompt = "Black"
                        },
                        new
                        {
                            Id = 12,
                            HEX = "#FFFFFF",
                            Name = "Vit",
                            Prompt = "White"
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Domain.Drink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FlavourId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("StyleId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<int>("UploadedImageId")
                        .HasColumnType("int");

                    b.Property<string>("UrlSlug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FlavourId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("StyleId");

                    b.HasIndex("TagId");

                    b.HasIndex("UploadedImageId");

                    b.ToTable("Drink");
                });

            modelBuilder.Entity("DataLayer.Models.Domain.Flavour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Flavour");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Syrlig"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bitter"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Fräsch"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Torr"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Fruktig"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Söt"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Stark"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Örtig"
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Domain.Garnish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Garnish");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Citrontwist",
                            Prompt = "Lemon peel twist"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Apelsintwist",
                            Prompt = "Orange peel twist"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Citronskiva",
                            Prompt = "Lemon slice"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Limeklyfta",
                            Prompt = "Lime Slice"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Selleristjälk",
                            Prompt = "cellery"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Apelsinklyfta",
                            Prompt = "orange slice"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Grön oliv",
                            Prompt = "Green olive"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Färska bär",
                            Prompt = "Fresh berries"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Ananasblad",
                            Prompt = "Pinapple leaf"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Färska hallon",
                            Prompt = "Fresh raspberry"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Ananasskiva",
                            Prompt = "Pinaple slice"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Citronklyfta",
                            Prompt = "Lemon slice"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Limeskiva",
                            Prompt = "lime slice"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Färskt hallon",
                            Prompt = "Fresh raspberry"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Jordgubbe",
                            Prompt = "Strawberry"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Limetwist",
                            Prompt = "Lime peel twist"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Cocktailbär",
                            Prompt = "Cocktail berry"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Grapefruktskal",
                            Prompt = "Grapefriut peel"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Myntakvist",
                            Prompt = "Mint stalk"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Apelsinskiva",
                            Prompt = "Orange Slice"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Basilikakvist",
                            Prompt = "Basil stalk"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Apelsinskal",
                            Prompt = "Orange peel"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Maraschinokörsbär",
                            Prompt = "Maraschino cherry"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Grapefruktskiva",
                            Prompt = "Grapefruit slice"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Äppelskiva",
                            Prompt = "Apple slice"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Persikoskiva",
                            Prompt = "Peech slice"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Grapefrukttwist",
                            Prompt = "Grapefruit peel twist"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Jordgubbsskiva",
                            Prompt = "Strawberry slice"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Citron- eller limeklyfta",
                            Prompt = "Lemon and Lime peel"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Citronskal",
                            Prompt = "Lemon peel"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Bränd apelsintwist",
                            Prompt = "Orange peel twist"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Myntabukett",
                            Prompt = "Mint buke"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Selleri",
                            Prompt = "Cellery"
                        },
                        new
                        {
                            Id = 36,
                            Name = "kanelstång",
                            Prompt = "cinnamon stick"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Syltlök",
                            Prompt = "Syltlök"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Bananskiva",
                            Prompt = "banana slice"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Apelsin- eller citrontwist",
                            Prompt = "Orange and lemon peel twist"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Myntablad",
                            Prompt = "Mintleaf"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Citrontwist eller oliv",
                            Prompt = "lemon peel twist and olive"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Passionsfrukt",
                            Prompt = "passion-fruit"
                        },
                        new
                        {
                            Id = 48,
                            Name = "3 kaffebönor",
                            Prompt = "coffebeans"
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Domain.GeneratedImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DoneAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DrinkId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDone")
                        .HasColumnType("bit");

                    b.Property<string>("OriginalUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginatingMessageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.ToTable("GeneratedImage");
                });

            modelBuilder.Entity("DataLayer.Models.Domain.Glass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Glass");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Champagne",
                            Prompt = "Champagne"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Old Fashioned",
                            Prompt = "Old Fashioned"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Highball",
                            Prompt = "Highball"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cocktail",
                            Prompt = "Cocktail"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Collins",
                            Prompt = "Collins"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Dubbel Old Fashioned",
                            Prompt = "Double Old Fashioned"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Vinglas",
                            Prompt = "Wine Glass"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Toddy",
                            Prompt = "Toddy"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Gin & Tonic",
                            Prompt = "Gin & Tonic"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Julep cup",
                            Prompt = "Julep Cup"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Martini",
                            Prompt = "Martini"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Hurricane",
                            Prompt = "Hurricane"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Kopparbägare",
                            Prompt = "Copper Mug"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Margarita",
                            Prompt = "Margarita"
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Domain.Ingridient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ingridient");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "bourbon"
                        },
                        new
                        {
                            Id = 2,
                            Name = "champagne"
                        },
                        new
                        {
                            Id = 3,
                            Name = "färskpressad citronjuice"
                        },
                        new
                        {
                            Id = 4,
                            Name = "extra söt sockerlag (2:1)"
                        },
                        new
                        {
                            Id = 5,
                            Name = "akvavit"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Campari"
                        },
                        new
                        {
                            Id = 7,
                            Name = "iste"
                        },
                        new
                        {
                            Id = 8,
                            Name = "lemonad"
                        },
                        new
                        {
                            Id = 9,
                            Name = "alkoholfri rom"
                        },
                        new
                        {
                            Id = 10,
                            Name = "lime"
                        },
                        new
                        {
                            Id = 11,
                            Name = "sockerlag (1:1)"
                        },
                        new
                        {
                            Id = 12,
                            Name = "myntablad"
                        },
                        new
                        {
                            Id = 13,
                            Name = "soda"
                        },
                        new
                        {
                            Id = 14,
                            Name = "tomatjuice"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Worcestershiresås"
                        },
                        new
                        {
                            Id = 16,
                            Name = "svartpeppar"
                        },
                        new
                        {
                            Id = 17,
                            Name = "chilisås"
                        },
                        new
                        {
                            Id = 18,
                            Name = "kall ljus lager"
                        },
                        new
                        {
                            Id = 19,
                            Name = "färskpressad apelsinjuice"
                        },
                        new
                        {
                            Id = 20,
                            Name = "gin"
                        },
                        new
                        {
                            Id = 21,
                            Name = "fino eller manzanilla sherry"
                        },
                        new
                        {
                            Id = 22,
                            Name = "mezcal"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Cointreau"
                        },
                        new
                        {
                            Id = 24,
                            Name = "färskpressad limejuice"
                        },
                        new
                        {
                            Id = 25,
                            Name = "torr vermouth"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Old Tom gin"
                        },
                        new
                        {
                            Id = 27,
                            Name = "orange bitters"
                        },
                        new
                        {
                            Id = 28,
                            Name = "amontillado sherry"
                        },
                        new
                        {
                            Id = 29,
                            Name = "apelsinskivor"
                        },
                        new
                        {
                            Id = 30,
                            Name = "grön Chartreuse"
                        },
                        new
                        {
                            Id = 31,
                            Name = "falernum"
                        },
                        new
                        {
                            Id = 32,
                            Name = "färskpressad ananasjuice"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Lillet Blanc"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Suze"
                        },
                        new
                        {
                            Id = 35,
                            Name = "vodka"
                        },
                        new
                        {
                            Id = 36,
                            Name = "hallonlikör"
                        },
                        new
                        {
                            Id = 37,
                            Name = "svartvinbärslikör"
                        },
                        new
                        {
                            Id = 38,
                            Name = "färska hallon"
                        },
                        new
                        {
                            Id = 39,
                            Name = "blanco tequila"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Drambuie"
                        },
                        new
                        {
                            Id = 41,
                            Name = "iskall soda"
                        },
                        new
                        {
                            Id = 42,
                            Name = "amaretto"
                        },
                        new
                        {
                            Id = 43,
                            Name = "sloe gin"
                        },
                        new
                        {
                            Id = 44,
                            Name = "olivspad"
                        },
                        new
                        {
                            Id = 45,
                            Name = "limeklyfta"
                        },
                        new
                        {
                            Id = 46,
                            Name = "ljus rom"
                        },
                        new
                        {
                            Id = 47,
                            Name = "gold rom"
                        },
                        new
                        {
                            Id = 48,
                            Name = "bananlikör"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Galliano"
                        },
                        new
                        {
                            Id = 50,
                            Name = "kokoslikör"
                        },
                        new
                        {
                            Id = 51,
                            Name = "kokosmjölk"
                        },
                        new
                        {
                            Id = 52,
                            Name = "citrongräs"
                        },
                        new
                        {
                            Id = 53,
                            Name = "tunna skivor ingefära"
                        },
                        new
                        {
                            Id = 54,
                            Name = "thaichili"
                        },
                        new
                        {
                            Id = 55,
                            Name = "kaffir limeblad"
                        },
                        new
                        {
                            Id = 56,
                            Name = "absint"
                        },
                        new
                        {
                            Id = 57,
                            Name = "aguardiente eller ljus kubansk rom"
                        },
                        new
                        {
                            Id = 58,
                            Name = "honungssyrup (1:1)"
                        },
                        new
                        {
                            Id = 59,
                            Name = "blended skotsk whisky"
                        },
                        new
                        {
                            Id = 60,
                            Name = "röd vermouth"
                        },
                        new
                        {
                            Id = 61,
                            Name = "Angostura bitters"
                        },
                        new
                        {
                            Id = 62,
                            Name = "färskpressad grapefruktjuice"
                        },
                        new
                        {
                            Id = 63,
                            Name = "whiskey"
                        },
                        new
                        {
                            Id = 64,
                            Name = "Chambord"
                        },
                        new
                        {
                            Id = 65,
                            Name = "genever"
                        },
                        new
                        {
                            Id = 66,
                            Name = "orgeat"
                        },
                        new
                        {
                            Id = 67,
                            Name = "mörk rom"
                        },
                        new
                        {
                            Id = 68,
                            Name = "tawny portvin"
                        },
                        new
                        {
                            Id = 69,
                            Name = "kokosrom"
                        },
                        new
                        {
                            Id = 70,
                            Name = "tranbärsjuice"
                        },
                        new
                        {
                            Id = 71,
                            Name = "agavesirap"
                        },
                        new
                        {
                            Id = 72,
                            Name = "färska jordgubbar"
                        },
                        new
                        {
                            Id = 73,
                            Name = "salt"
                        },
                        new
                        {
                            Id = 74,
                            Name = "hibiskussockerlag"
                        },
                        new
                        {
                            Id = 75,
                            Name = "rye whiskey"
                        },
                        new
                        {
                            Id = 76,
                            Name = "grenadin"
                        },
                        new
                        {
                            Id = 77,
                            Name = "Sprite eller ginger ale"
                        },
                        new
                        {
                            Id = 78,
                            Name = "brandy"
                        },
                        new
                        {
                            Id = 79,
                            Name = "mjölk (3 %)"
                        },
                        new
                        {
                            Id = 80,
                            Name = "vispgrädde"
                        },
                        new
                        {
                            Id = 81,
                            Name = "ginger ale"
                        },
                        new
                        {
                            Id = 82,
                            Name = "irländsk whiskey"
                        },
                        new
                        {
                            Id = 83,
                            Name = "tonic"
                        },
                        new
                        {
                            Id = 84,
                            Name = "cachaça"
                        },
                        new
                        {
                            Id = 85,
                            Name = "bianco vermouth"
                        },
                        new
                        {
                            Id = 86,
                            Name = "mörk jamaicansk rom"
                        },
                        new
                        {
                            Id = 87,
                            Name = "75-procentig demerararom"
                        },
                        new
                        {
                            Id = 88,
                            Name = "fassionolasyrup "
                        },
                        new
                        {
                            Id = 89,
                            Name = "iskall mexikansk lager"
                        },
                        new
                        {
                            Id = 90,
                            Name = "Bénédictine"
                        },
                        new
                        {
                            Id = 91,
                            Name = "saltlag (1:1)"
                        },
                        new
                        {
                            Id = 92,
                            Name = "apelsinblomsvatten"
                        },
                        new
                        {
                            Id = 93,
                            Name = "añejo tequila"
                        },
                        new
                        {
                            Id = 94,
                            Name = "smaksatt sockerlag"
                        },
                        new
                        {
                            Id = 95,
                            Name = "vispgrädde eller vaniljglass"
                        },
                        new
                        {
                            Id = 96,
                            Name = "kryddsmör"
                        },
                        new
                        {
                            Id = 97,
                            Name = "kokhett vatten"
                        },
                        new
                        {
                            Id = 98,
                            Name = "Advocaat"
                        },
                        new
                        {
                            Id = 99,
                            Name = "vitt vin"
                        },
                        new
                        {
                            Id = 100,
                            Name = "billigt rödvin"
                        },
                        new
                        {
                            Id = 101,
                            Name = "färska basilikablad"
                        },
                        new
                        {
                            Id = 102,
                            Name = "Tabasco"
                        },
                        new
                        {
                            Id = 103,
                            Name = "färskmalen svartpeppar"
                        },
                        new
                        {
                            Id = 104,
                            Name = "torrt vitt vin"
                        },
                        new
                        {
                            Id = 105,
                            Name = "maraschinolikör"
                        },
                        new
                        {
                            Id = 106,
                            Name = "gul Chartreuse"
                        },
                        new
                        {
                            Id = 107,
                            Name = "Jägermeister"
                        },
                        new
                        {
                            Id = 108,
                            Name = "passionsfruktsockerlag"
                        },
                        new
                        {
                            Id = 109,
                            Name = "socker"
                        },
                        new
                        {
                            Id = 110,
                            Name = "Cynar"
                        },
                        new
                        {
                            Id = 111,
                            Name = "färskpressad röd grapefruktjuice"
                        },
                        new
                        {
                            Id = 112,
                            Name = "dry curaçao"
                        },
                        new
                        {
                            Id = 113,
                            Name = "applejack eller calvados"
                        },
                        new
                        {
                            Id = 114,
                            Name = "Jack Daniel's Tennessee whiskey"
                        },
                        new
                        {
                            Id = 115,
                            Name = "Sprite eller 7 Up"
                        },
                        new
                        {
                            Id = 116,
                            Name = "calvados"
                        },
                        new
                        {
                            Id = 117,
                            Name = "orange curaçao"
                        },
                        new
                        {
                            Id = 118,
                            Name = "allspice dram"
                        },
                        new
                        {
                            Id = 119,
                            Name = "cognac"
                        },
                        new
                        {
                            Id = 120,
                            Name = "anisette"
                        },
                        new
                        {
                            Id = 121,
                            Name = "rörsocker"
                        },
                        new
                        {
                            Id = 122,
                            Name = "kanelstänger"
                        },
                        new
                        {
                            Id = 123,
                            Name = "nejlikor"
                        },
                        new
                        {
                            Id = 124,
                            Name = "stjärnanis"
                        },
                        new
                        {
                            Id = 125,
                            Name = "kardemummakapslar"
                        },
                        new
                        {
                            Id = 126,
                            Name = "riven ingefära"
                        },
                        new
                        {
                            Id = 127,
                            Name = "riven muskot"
                        },
                        new
                        {
                            Id = 128,
                            Name = "apelsin"
                        },
                        new
                        {
                            Id = 129,
                            Name = "rosévin"
                        },
                        new
                        {
                            Id = 130,
                            Name = "äpple"
                        },
                        new
                        {
                            Id = 131,
                            Name = "vaniljstång"
                        },
                        new
                        {
                            Id = 132,
                            Name = "Navy Strength gin"
                        },
                        new
                        {
                            Id = 133,
                            Name = "Aperol"
                        },
                        new
                        {
                            Id = 134,
                            Name = "Angostura orange bitters"
                        },
                        new
                        {
                            Id = 135,
                            Name = "mangopuré"
                        },
                        new
                        {
                            Id = 136,
                            Name = "oloroso sherry"
                        },
                        new
                        {
                            Id = 137,
                            Name = "ägg"
                        },
                        new
                        {
                            Id = 138,
                            Name = "citronklyftor"
                        },
                        new
                        {
                            Id = 139,
                            Name = "persikor"
                        },
                        new
                        {
                            Id = 140,
                            Name = "fino sherry"
                        },
                        new
                        {
                            Id = 141,
                            Name = "lagrad rom"
                        },
                        new
                        {
                            Id = 142,
                            Name = "röd vermouth, vit vermouth eller torr vermouth"
                        },
                        new
                        {
                            Id = 143,
                            Name = "jordgubbsinfunderad Campari"
                        },
                        new
                        {
                            Id = 144,
                            Name = "färskpressad juice"
                        },
                        new
                        {
                            Id = 145,
                            Name = "Seagram's 7 Crown whiskey"
                        },
                        new
                        {
                            Id = 146,
                            Name = "7 Up"
                        },
                        new
                        {
                            Id = 147,
                            Name = "råsockerlag (1:1)"
                        },
                        new
                        {
                            Id = 148,
                            Name = "bourbon, rye eller brandy"
                        },
                        new
                        {
                            Id = 149,
                            Name = "aprikoslikör"
                        },
                        new
                        {
                            Id = 150,
                            Name = "spiced rum"
                        },
                        new
                        {
                            Id = 151,
                            Name = "mörk navy strength rom"
                        },
                        new
                        {
                            Id = 152,
                            Name = "björnbärslikör"
                        },
                        new
                        {
                            Id = 153,
                            Name = "gurkskivor "
                        },
                        new
                        {
                            Id = 154,
                            Name = "hallonsockerlag"
                        },
                        new
                        {
                            Id = 155,
                            Name = "ginger beer"
                        },
                        new
                        {
                            Id = 156,
                            Name = "molebitters "
                        },
                        new
                        {
                            Id = 157,
                            Name = "mörk rhum agricole"
                        },
                        new
                        {
                            Id = 158,
                            Name = "Dubonnet "
                        },
                        new
                        {
                            Id = 159,
                            Name = "crème de cacao "
                        },
                        new
                        {
                            Id = 160,
                            Name = "orange curaçao eller Cointreau"
                        },
                        new
                        {
                            Id = 161,
                            Name = "crème de menthe"
                        },
                        new
                        {
                            Id = 162,
                            Name = "äggvita eller aquafaba"
                        },
                        new
                        {
                            Id = 163,
                            Name = "pisco"
                        },
                        new
                        {
                            Id = 164,
                            Name = "Luxardo Bitter Bianco "
                        },
                        new
                        {
                            Id = 165,
                            Name = "skotsk whisky"
                        },
                        new
                        {
                            Id = 166,
                            Name = "jamaicansk rom"
                        },
                        new
                        {
                            Id = 167,
                            Name = "St-Germain"
                        },
                        new
                        {
                            Id = 168,
                            Name = "Fernet "
                        },
                        new
                        {
                            Id = 169,
                            Name = "Cola "
                        },
                        new
                        {
                            Id = 170,
                            Name = "fino, manzanilla eller amontillado sherry"
                        },
                        new
                        {
                            Id = 171,
                            Name = "mynta"
                        },
                        new
                        {
                            Id = 172,
                            Name = "Lustau East India sherry"
                        },
                        new
                        {
                            Id = 173,
                            Name = "jordgubbssockerlag "
                        },
                        new
                        {
                            Id = 174,
                            Name = "brandy eller cognac"
                        },
                        new
                        {
                            Id = 175,
                            Name = "Ruby Port portvin "
                        },
                        new
                        {
                            Id = 176,
                            Name = "ananassyrup "
                        },
                        new
                        {
                            Id = 177,
                            Name = "Amer Picon "
                        },
                        new
                        {
                            Id = 178,
                            Name = "extra söt råsockerlag (2:1)"
                        },
                        new
                        {
                            Id = 179,
                            Name = "flaska (75 cl) torrt vitt vin"
                        },
                        new
                        {
                            Id = 180,
                            Name = "citron "
                        },
                        new
                        {
                            Id = 181,
                            Name = "ginger ale eller soda"
                        },
                        new
                        {
                            Id = 182,
                            Name = "flaska (75 cl) cava"
                        },
                        new
                        {
                            Id = 183,
                            Name = "persika "
                        },
                        new
                        {
                            Id = 184,
                            Name = "hallon"
                        },
                        new
                        {
                            Id = 185,
                            Name = "flaska (75 cl) rosévin"
                        },
                        new
                        {
                            Id = 186,
                            Name = "flaska (75 cl) torrt rött vin"
                        },
                        new
                        {
                            Id = 187,
                            Name = "jordgubbar"
                        },
                        new
                        {
                            Id = 188,
                            Name = "torrt rött vin"
                        },
                        new
                        {
                            Id = 189,
                            Name = "peach bitters"
                        },
                        new
                        {
                            Id = 190,
                            Name = "Fever Tree Elderflower tonic"
                        },
                        new
                        {
                            Id = 191,
                            Name = "Scrappy's Lavender bitters"
                        },
                        new
                        {
                            Id = 192,
                            Name = "Prosecco"
                        },
                        new
                        {
                            Id = 193,
                            Name = "apelsininfunderad Aperol"
                        },
                        new
                        {
                            Id = 194,
                            Name = "passionsfruktslikör"
                        },
                        new
                        {
                            Id = 195,
                            Name = "passionsfrukt"
                        },
                        new
                        {
                            Id = 196,
                            Name = "vaniljvodka"
                        },
                        new
                        {
                            Id = 197,
                            Name = "Butterscotch Schnapps"
                        },
                        new
                        {
                            Id = 198,
                            Name = "hallonpuré"
                        },
                        new
                        {
                            Id = 199,
                            Name = "blackstrap-rom"
                        },
                        new
                        {
                            Id = 200,
                            Name = "Wray & Nephew White Overproof rom"
                        },
                        new
                        {
                            Id = 201,
                            Name = "Ting"
                        },
                        new
                        {
                            Id = 202,
                            Name = "blue curaçao"
                        },
                        new
                        {
                            Id = 203,
                            Name = "gold rom t ex Gosling's Gold Seal"
                        },
                        new
                        {
                            Id = 204,
                            Name = "ljus kubansk rom"
                        },
                        new
                        {
                            Id = 205,
                            Name = "whiskey, bourbon, mörk rom eller cognac"
                        },
                        new
                        {
                            Id = 206,
                            Name = "honung"
                        },
                        new
                        {
                            Id = 207,
                            Name = "varmt vatten"
                        },
                        new
                        {
                            Id = 208,
                            Name = "apricot brandy"
                        },
                        new
                        {
                            Id = 209,
                            Name = "reposado tequila"
                        },
                        new
                        {
                            Id = 210,
                            Name = "Highland malt skotsk whisky"
                        },
                        new
                        {
                            Id = 211,
                            Name = "stora ägg"
                        },
                        new
                        {
                            Id = 212,
                            Name = "crème de noyaux"
                        },
                        new
                        {
                            Id = 213,
                            Name = "Punt e Mes vermouth"
                        },
                        new
                        {
                            Id = 214,
                            Name = "amaro"
                        },
                        new
                        {
                            Id = 215,
                            Name = "Peychaud's bitters"
                        },
                        new
                        {
                            Id = 216,
                            Name = "färskpressad äppeljuice"
                        },
                        new
                        {
                            Id = 217,
                            Name = "rabarbersockerlag (1:1)"
                        },
                        new
                        {
                            Id = 218,
                            Name = "passionsfruktpuré"
                        },
                        new
                        {
                            Id = 219,
                            Name = "Midori"
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Domain.Instruction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("Instruction");
                });

            modelBuilder.Entity("DataLayer.Models.Domain.Measurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("IngridientId")
                        .HasColumnType("int");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IngridientId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UnitId");

                    b.ToTable("Measurement");
                });

            modelBuilder.Entity("DataLayer.Models.Domain.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Recipe");
                });

            modelBuilder.Entity("DataLayer.Models.Domain.Style", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("GarnishId")
                        .HasColumnType("int");

                    b.Property<int>("GlassId")
                        .HasColumnType("int");

                    b.Property<bool>("HasIce")
                        .HasColumnType("bit");

                    b.Property<int>("TransparencyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("GarnishId");

                    b.HasIndex("GlassId");

                    b.HasIndex("TransparencyId");

                    b.ToTable("Style");
                });

            modelBuilder.Entity("DataLayer.Models.Domain.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tag");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Variant av en klassiker"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Alkoholfri drink"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Öldrink"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Klassisk cocktail"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Modern klassiker"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Fräsch törstsläckare"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Fräsch sommardrink"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Svalkande törstsläckare"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Kultklassiker"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Modern cocktail"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Läskande törstsläckare"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Svalkande sommardrink"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Tikifavorit"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Ölcocktail"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Dessertcocktail"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Bitter sippare"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Klassisk vintervärmare"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Sommarfavorit"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Söt sippare"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Klassisk juldryck"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Sommardrink"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Enkel grogg"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Klassisk cocktal"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Modern Tikidrink"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Tikiklassiker"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Twist på en klassiker"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Sommarklassiker"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Brunchdrink"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Populär sour"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Karibisk törstsläckare"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Tropisk favorit"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Bittersöt favorit"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Martinivariant"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Juldrink"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Bitter sour"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Klassisk apertif"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Dessertdrink"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Klassisk bubbeldrink"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Gräddig dessertcocktail"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Rökig aperitivo"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Rökig aperitivo"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Rökig törstsläckare"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Bitter bubbeldrink"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Klassisk sommardrink"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Enkel longdrink"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Bittersöt törstsläckare"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Bittersöt longdrink"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Fruktig sour"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Karibisk klassiker"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Klassisk törstsläckare"
                        },
                        new
                        {
                            Id = 51,
                            Name = "Tropisk tikidrink"
                        },
                        new
                        {
                            Id = 52,
                            Name = "Elegant klassiker"
                        },
                        new
                        {
                            Id = 53,
                            Name = "Amerikansk klassiker"
                        },
                        new
                        {
                            Id = 54,
                            Name = "Läskande sommardrink"
                        },
                        new
                        {
                            Id = 55,
                            Name = "Tropisk törstsläckare"
                        },
                        new
                        {
                            Id = 56,
                            Name = "Potent kaffekick"
                        },
                        new
                        {
                            Id = 57,
                            Name = "Rom och Cola 2.0"
                        },
                        new
                        {
                            Id = 58,
                            Name = "Elegant brunchdrink"
                        },
                        new
                        {
                            Id = 59,
                            Name = "Klassisk sour"
                        },
                        new
                        {
                            Id = 60,
                            Name = "Trendig cocktail"
                        },
                        new
                        {
                            Id = 61,
                            Name = "Fräsch strandfavorit"
                        },
                        new
                        {
                            Id = 62,
                            Name = "Somrig favorit"
                        },
                        new
                        {
                            Id = 63,
                            Name = "Klassisk återställare"
                        },
                        new
                        {
                            Id = 64,
                            Name = "Klassisk brunchdrink"
                        },
                        new
                        {
                            Id = 65,
                            Name = "Frisk sommarfavorit"
                        },
                        new
                        {
                            Id = 66,
                            Name = "Kubas nationaldrink"
                        },
                        new
                        {
                            Id = 67,
                            Name = "Bubblig Sommarfavorit"
                        },
                        new
                        {
                            Id = 68,
                            Name = "Klassisk kaffedrink"
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Domain.Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tool");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "shaker"
                        },
                        new
                        {
                            Id = 2,
                            Name = "citruspress"
                        },
                        new
                        {
                            Id = 3,
                            Name = "rörglas"
                        },
                        new
                        {
                            Id = 4,
                            Name = "barsked"
                        },
                        new
                        {
                            Id = 5,
                            Name = "muddlare"
                        },
                        new
                        {
                            Id = 6,
                            Name = "juicemaskin"
                        },
                        new
                        {
                            Id = 7,
                            Name = "citrus"
                        },
                        new
                        {
                            Id = 9,
                            Name = "rivjärn"
                        },
                        new
                        {
                            Id = 10,
                            Name = "blender"
                        },
                        new
                        {
                            Id = 11,
                            Name = "kastrull"
                        },
                        new
                        {
                            Id = 12,
                            Name = "råsaftcentrifug"
                        },
                        new
                        {
                            Id = 13,
                            Name = "swizzle stick eller barsked"
                        },
                        new
                        {
                            Id = 14,
                            Name = "kniv"
                        },
                        new
                        {
                            Id = 15,
                            Name = "swizzle stick/barsked"
                        },
                        new
                        {
                            Id = 16,
                            Name = "tändstickor"
                        },
                        new
                        {
                            Id = 17,
                            Name = "citrusskalare"
                        },
                        new
                        {
                            Id = 18,
                            Name = "juicemaskin/citruspress"
                        },
                        new
                        {
                            Id = 19,
                            Name = "kaffebryggare"
                        },
                        new
                        {
                            Id = 20,
                            Name = "sked"
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Domain.Transparency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Transparency");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Transparent",
                            Prompt = "water"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Semi transparent",
                            Prompt = "frozen slush"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Solid",
                            Prompt = "milk"
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Domain.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Unit");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "cl"
                        },
                        new
                        {
                            Id = 2,
                            Name = "st"
                        },
                        new
                        {
                            Id = 4,
                            Name = "nypa"
                        },
                        new
                        {
                            Id = 5,
                            Name = "stänk"
                        },
                        new
                        {
                            Id = 6,
                            Name = "tsk"
                        },
                        new
                        {
                            Id = 7,
                            Name = "cm"
                        },
                        new
                        {
                            Id = 8,
                            Name = "bit"
                        },
                        new
                        {
                            Id = 9,
                            Name = "droppar"
                        },
                        new
                        {
                            Id = 10,
                            Name = "msk"
                        },
                        new
                        {
                            Id = 11,
                            Name = "nypor"
                        },
                        new
                        {
                            Id = 12,
                            Name = "flaska"
                        },
                        new
                        {
                            Id = 13,
                            Name = "dl"
                        },
                        new
                        {
                            Id = 14,
                            Name = "g"
                        },
                        new
                        {
                            Id = 15,
                            Name = "stora"
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Domain.UploadedImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AltText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GeneratedImageId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Uploaded")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GeneratedImageId");

                    b.ToTable("UploadedImage");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RecipeTool", b =>
                {
                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("RecipesId")
                        .HasColumnType("int");

                    b.HasKey("EquipmentId", "RecipesId");

                    b.HasIndex("RecipesId");

                    b.ToTable("RecipeTool");
                });

            modelBuilder.Entity("DataLayer.Models.Domain.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "2c3488bd-6338-40f9-85d0-9e08462c9376",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5644c923140b",
                            Email = "Henrik.johansson@sogeti.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HENRIK.JOHANSSON@SOGETI.COM",
                            NormalizedUserName = "ROOTUSER",
                            PasswordHash = "AN6Kz0IfIzNdho+g+EESPt8IPNukKgPzk6GsEIl78JFayKiB2g9lzxOL4lNi6xgbOw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0180a8d6-cb12-4c23-8638-a47117e05a9d",
                            TwoFactorEnabled = false,
                            UserName = "RootUser",
                            IsDeleted = false,
                            Name = "RootUser"
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Domain.Drink", b =>
                {
                    b.HasOne("DataLayer.Models.Domain.ApplicationUser", "Creator")
                        .WithMany("CreatedDrinks")
                        .HasForeignKey("CreatorId");

                    b.HasOne("DataLayer.Models.Domain.Flavour", "Flavour")
                        .WithMany("Drinks")
                        .HasForeignKey("FlavourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Domain.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Domain.Style", "Style")
                        .WithMany()
                        .HasForeignKey("StyleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Domain.Tag", "Tag")
                        .WithMany("Drinks")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Domain.UploadedImage", "UploadedImage")
                        .WithMany()
                        .HasForeignKey("UploadedImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Flavour");

                    b.Navigation("Recipe");

                    b.Navigation("Style");

                    b.Navigation("Tag");

                    b.Navigation("UploadedImage");
                });

            modelBuilder.Entity("DataLayer.Models.Domain.GeneratedImage", b =>
                {
                    b.HasOne("DataLayer.Models.Domain.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");
                });

            modelBuilder.Entity("DataLayer.Models.Domain.Instruction", b =>
                {
                    b.HasOne("DataLayer.Models.Domain.Recipe", null)
                        .WithMany("Instructions")
                        .HasForeignKey("RecipeId");
                });

            modelBuilder.Entity("DataLayer.Models.Domain.Measurement", b =>
                {
                    b.HasOne("DataLayer.Models.Domain.Ingridient", "Ingridient")
                        .WithMany("Measurements")
                        .HasForeignKey("IngridientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Domain.Recipe", null)
                        .WithMany("Measurements")
                        .HasForeignKey("RecipeId");

                    b.HasOne("DataLayer.Models.Domain.Unit", "Unit")
                        .WithMany("Measurements")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingridient");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("DataLayer.Models.Domain.Style", b =>
                {
                    b.HasOne("DataLayer.Models.Domain.Color", "Color")
                        .WithMany("Styles")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Domain.Garnish", "Garnish")
                        .WithMany("Styles")
                        .HasForeignKey("GarnishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Domain.Glass", "Glass")
                        .WithMany("Styles")
                        .HasForeignKey("GlassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Domain.Transparency", "Transparency")
                        .WithMany("Styles")
                        .HasForeignKey("TransparencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Garnish");

                    b.Navigation("Glass");

                    b.Navigation("Transparency");
                });

            modelBuilder.Entity("DataLayer.Models.Domain.UploadedImage", b =>
                {
                    b.HasOne("DataLayer.Models.Domain.GeneratedImage", null)
                        .WithMany("Variations")
                        .HasForeignKey("GeneratedImageId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecipeTool", b =>
                {
                    b.HasOne("DataLayer.Models.Domain.Tool", null)
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Domain.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Models.Domain.Color", b =>
                {
                    b.Navigation("Styles");
                });

            modelBuilder.Entity("DataLayer.Models.Domain.Flavour", b =>
                {
                    b.Navigation("Drinks");
                });

            modelBuilder.Entity("DataLayer.Models.Domain.Garnish", b =>
                {
                    b.Navigation("Styles");
                });

            modelBuilder.Entity("DataLayer.Models.Domain.GeneratedImage", b =>
                {
                    b.Navigation("Variations");
                });

            modelBuilder.Entity("DataLayer.Models.Domain.Glass", b =>
                {
                    b.Navigation("Styles");
                });

            modelBuilder.Entity("DataLayer.Models.Domain.Ingridient", b =>
                {
                    b.Navigation("Measurements");
                });

            modelBuilder.Entity("DataLayer.Models.Domain.Recipe", b =>
                {
                    b.Navigation("Instructions");

                    b.Navigation("Measurements");
                });

            modelBuilder.Entity("DataLayer.Models.Domain.Tag", b =>
                {
                    b.Navigation("Drinks");
                });

            modelBuilder.Entity("DataLayer.Models.Domain.Transparency", b =>
                {
                    b.Navigation("Styles");
                });

            modelBuilder.Entity("DataLayer.Models.Domain.Unit", b =>
                {
                    b.Navigation("Measurements");
                });

            modelBuilder.Entity("DataLayer.Models.Domain.ApplicationUser", b =>
                {
                    b.Navigation("CreatedDrinks");
                });
#pragma warning restore 612, 618
        }
    }
}
